import asyncio
import logging
from contextlib import asynccontextmanager
from datetime import datetime, timezone, timedelta
from typing import List

from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

from .config import load_settings
from .exchange import ExchangeClient, ts_now_iso
from .indicators import add_indicators, latest_snapshot
from .analyzer import LLMAnalyzer
from .storage import Storage
from .scheduler import run_sync

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("bot")

@asynccontextmanager
async def lifespan(dp: Dispatcher):
    yield

# –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –∫–∞–Ω–∞–ª (—Ä—É—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞)
active = True
router = Router()

# ----------------- –£—Ç–∏–ª–∏—Ç—ã -----------------

def _within_cooldown(storage: Storage, symbol: str, timeframe: str, hours: int) -> bool:
    last = storage.last_buy_ts(symbol, timeframe)
    if not last:
        return False
    try:
        last_dt = datetime.fromisoformat(last.replace("Z", "+00:00"))
    except Exception:
        return False
    return (datetime.now(timezone.utc) - last_dt) < timedelta(hours=hours)

def _norm_symbol(s: str) -> str:
    return s.upper().replace(":", "/").replace(" ", "")

async def _build_snapshots_triple(
    ex: ExchangeClient,
    symbol: str,
    tfs: List[str],
    ma_window: int,
    macd_fast: int,
    macd_slow: int,
    macd_signal: int,
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: { '1w': snapshot, '1d': snapshot, '4h': snapshot }
    –∏–ª–∏ None –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ TF –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö.
    """
    result = {}
    for tf in tfs:
        df = await run_sync(ex.fetch_ohlcv, symbol, tf, 300)
        if df is None or len(df) < max(ma_window, macd_slow) + 5:
            return None
        df = add_indicators(df, ma_window, macd_fast, macd_slow, macd_signal)
        snap = latest_snapshot(df, ma_window)
        result[tf] = snap
    return result

def _format_card(symbol: str, tfs: List[str], buy: bool, conf: float, checks: dict, reason: str) -> str:
    return (
        f"{'üü¢' if buy else 'üî∏'} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∞ –≠–ª–¥–µ—Ä–∞)</b>\n"
        f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: <code>{symbol}</code>\n"
        f"TF: <code>{'/'.join(tfs)}</code>\n"
        f"–í—Ä–µ–º—è (UTC): <code>{ts_now_iso()}</code>\n\n"
        f"–°–∏–≥–Ω–∞–ª: <b>{'–ü–û–ö–£–ü–ê–¢–¨' if buy else '–Ω–µ—Ç'}</b>\n"
        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{conf:.2f}</b>\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∏: weekly_trend_ok={checks.get('weekly_trend_ok')}, "
        f"daily_macd_ok={checks.get('daily_macd_ok')}, "
        f"h4_volume_confirmation={checks.get('h4_volume_confirmation')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reason}"
    )

# ----------------- –ö–æ–º–∞–Ω–¥—ã -----------------

@router.message(CommandStart())
async def cmd_start(msg: Message):
    global active
    active = True
    settings = load_settings()
    storage = Storage(settings.state_dir)

    # —á—Ç–æ —Å–µ–π—á–∞—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–º
    stored = storage.get_global_symbols()
    current_list = stored if stored else (settings.symbols if settings.symbols else ["BTC/USDT"])
    await msg.answer(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º ¬´–°–∏—Å—Ç–µ–º—É —Ç—Ä—ë—Ö —ç–∫—Ä–∞–Ω–æ–≤¬ª –≠–ª–¥–µ—Ä–∞: 1w / 1d / 4h.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /setpairs BTC/USDT,ETH/USDT ‚Äî –∑–∞–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "‚Ä¢ /pairs ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ü–∏–∫–ª–æ–º –∏ /checkall)\n"
        "‚Ä¢ /clearpairs ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ (–≤–æ–∑–≤—Ä–∞—Ç –∫ .env SYMBOLS)\n"
        "‚Ä¢ /check [SYMBOL/QUOTE] ‚Äî –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –ø–∞—Ä—ã\n"
        "‚Ä¢ /checkall [S1,S2,...] ‚Äî –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä—ë–º /pairs)\n"
        "‚Ä¢ /stop ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª, /start ‚Äî –≤–∫–ª—é—á–∏—Ç—å\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ: <code>{', '.join(current_list)}</code>",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("stop"))
async def cmd_stop(msg: Message):
    global active
    active = False
    await msg.answer("‚õîÔ∏è –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –†—É—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç.")

@router.message(Command("setpairs"))
async def cmd_setpairs(msg: Message):
    """
    /setpairs BTC/USDT,ETH/USDT,HYPE/USDT
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ –ë–î, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è –∞–≤—Ç–æ—Ü–∏–∫–ª–æ–º –∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ /checkall.
    """
    settings = load_settings()
    storage = Storage(settings.state_dir)

    parts = (msg.text or "").strip().split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await msg.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: <code>/setpairs BTC/USDT,ETH/USDT</code>", parse_mode=ParseMode.HTML)
        return

    raw = parts[1]
    pairs = [_norm_symbol(x) for x in raw.split(",") if x.strip()]
    bad = [p for p in pairs if "/" not in p]
    if bad:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É: <code>" + ", ".join(bad) + "</code>. –ò—Å–ø–æ–ª—å–∑—É–π <code>SYMBOL/QUOTE</code>.",
                         parse_mode=ParseMode.HTML)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    storage.set_global_symbols(",".join(pairs))
    await msg.answer("‚úÖ –ü–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è: <code>" + ", ".join(pairs) + "</code>", parse_mode=ParseMode.HTML)

@router.message(Command("pairs"))
async def cmd_pairs(msg: Message):
    settings = load_settings()
    storage = Storage(settings.state_dir)
    stored = storage.get_global_symbols()
    if stored:
        await msg.answer("üìà –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–∏–∑ –ë–î): <code>" + ", ".join(stored) + "</code>", parse_mode=ParseMode.HTML)
    else:
        base = settings.symbols if settings.symbols else ["BTC/USDT"]
        await msg.answer("‚ÑπÔ∏è –í –ë–î —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤ –∏–∑ .env: <code>" + ", ".join(base) + "</code>",
                         parse_mode=ParseMode.HTML)

@router.message(Command("clearpairs"))
async def cmd_clearpairs(msg: Message):
    settings = load_settings()
    storage = Storage(settings.state_dir)
    storage.clear_global_symbols()
    base = settings.symbols if settings.symbols else ["BTC/USDT"]
    await msg.answer("üßπ –°–ø–∏—Å–æ–∫ –ø–∞—Ä –æ—á–∏—â–µ–Ω. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã .env SYMBOLS: <code>" + ", ".join(base) + "</code>",
                     parse_mode=ParseMode.HTML)

@router.message(Command("check"))
async def cmd_check(msg: Message, bot: Bot):
    """
    /check [SYMBOL/QUOTE] ‚Äî —Ç—Ä–æ–π–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –ø–∞—Ä—ã (1w/1d/4h).
    –ï—Å–ª–∏ –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∏–∑ /pairs (–∏–ª–∏ –∏–∑ .env, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç).
    """
    settings = load_settings()
    storage = Storage(settings.state_dir)
    ex = ExchangeClient(settings.exchange_id)
    llm = LLMAnalyzer(settings.openai_api_key, settings.openai_model)

    parts = (msg.text or "").strip().split(maxsplit=1)
    if len(parts) > 1 and parts[1].strip():
        symbol = _norm_symbol(parts[1])
    else:
        stored = storage.get_global_symbols()
        symbol = stored[0] if stored else (settings.symbols[0] if settings.symbols else "BTC/USDT")

    if "/" not in symbol:
        await msg.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: <code>SYMBOL/QUOTE</code>. –ü—Ä–∏–º–µ—Ä: <code>BTC/USDT</code>", parse_mode=ParseMode.HTML)
        return

    await msg.answer(f"‚è≥ –¢—Ä–æ–π–Ω–æ–π –∞–Ω–∞–ª–∏–∑ <b>{symbol}</b> (1w/1d/4h)‚Ä¶", parse_mode=ParseMode.HTML)

    snapshots = await _build_snapshots_triple(
        ex, symbol, settings.triple_timeframes,
        settings.ma_window, settings.macd_fast, settings.macd_slow, settings.macd_signal
    )
    if not snapshots:
        await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–∏—Ä–∂–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ TF.")
        return

    analysis = await run_sync(
        LLMAnalyzer.analyze_triple, llm,
        symbol, snapshots, settings.literature_urls, settings.report_locale
    )
    buy = bool(analysis.get("buy_signal"))
    conf = float(analysis.get("confidence", 0.0))
    reason = str(analysis.get("reason", ""))
    checks = analysis.get("checks", {})

    decision = "BUY" if buy else "NO_BUY"
    # –¥–ª—è cooldown –≤–µ–¥—ë–º –ø–æ –¥–Ω–µ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
    storage.insert_signal(symbol, "1d", decision, conf, reason)

    card = _format_card(symbol, settings.triple_timeframes, buy, conf, checks, reason)
    await msg.answer(card, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    if buy:
        if _within_cooldown(storage, symbol, "1d", settings.buy_cooldown_hours):
            await msg.answer(f"‚è∏ BUY –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞: cooldown {settings.buy_cooldown_hours} —á. (–ø–æ –¥–Ω–µ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É).")
        elif not active:
            await msg.answer("‚è∏ –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ (/start, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å).")
        else:
            await bot.send_message(
                settings.telegram_channel_id,
                "üü¢ <b>–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∞ –≠–ª–¥–µ—Ä–∞)</b>\n" + card.split("\n", 3)[3],
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            await msg.answer("‚úÖ –°–∏–≥–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")

@router.message(Command("checkall"))
async def cmd_checkall(msg: Message, bot: Bot):
    """
    /checkall
    /checkall BTC/USDT,ETH/USDT,BNB/USDT
    –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –±–µ—Ä—ë—Ç –ø–∞—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑ /pairs (–ë–î) –∏–ª–∏ –∏–∑ .env.
    """
    settings = load_settings()
    storage = Storage(settings.state_dir)
    ex = ExchangeClient(settings.exchange_id)
    llm = LLMAnalyzer(settings.openai_api_key, settings.openai_model)

    parts = (msg.text or "").strip().split(maxsplit=1)
    if len(parts) > 1 and parts[1].strip():
        symbols = [_norm_symbol(s) for s in parts[1].split(",") if s.strip()]
    else:
        stored = storage.get_global_symbols()
        symbols = stored if stored else (settings.symbols if settings.symbols else ["BTC/USDT"])

    symbols = symbols[:12]  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    await msg.answer(f"‚è≥ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ({len(symbols)} –ø–∞—Ä) –ø–æ —Ç—Ä—ë–º —ç–∫—Ä–∞–Ω–∞–º‚Ä¶")

    buys_to_publish = []
    results_lines = []

    for i, symbol in enumerate(symbols, start=1):
        try:
            snapshots = await _build_snapshots_triple(
                ex, symbol, settings.triple_timeframes,
                settings.ma_window, settings.macd_fast, settings.macd_slow, settings.macd_signal
            )
            if not snapshots:
                results_lines.append(f"{i}. {symbol}: ‚ùå –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                continue

            analysis = await run_sync(
                LLMAnalyzer.analyze_triple, llm,
                symbol, snapshots, settings.literature_urls, settings.report_locale
            )
            buy = bool(analysis.get("buy_signal"))
            conf = float(analysis.get("confidence", 0.0))
            reason = str(analysis.get("reason", ""))
            checks = analysis.get("checks", {})

            decision = "BUY" if buy else "NO_BUY"
            storage.insert_signal(symbol, "1d", decision, conf, reason)

            card = _format_card(symbol, settings.triple_timeframes, buy, conf, checks, reason)
            await msg.answer(card, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

            results_lines.append(f"{i}. {symbol}: {'üü¢ BUY' if buy else '‚Äî'} (conf={conf:.2f})")

            if buy:
                if _within_cooldown(storage, symbol, "1d", settings.buy_cooldown_hours):
                    results_lines[-1] += f" ‚è∏ cooldown {settings.buy_cooldown_hours}—á"
                elif not active:
                    results_lines[-1] += " ‚è∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞"
                else:
                    buys_to_publish.append(("üü¢ <b>–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (–ø–∞–∫–µ—Ç–Ω—ã–π, —Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∞)</b>\n" + card.split("\n", 3)[3]))
        except Exception as e:
            log.exception("checkall error on %s: %s", symbol, e)
            results_lines.append(f"{i}. {symbol}: ‚ùå –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

    # –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ BUY –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    for text in buys_to_publish:
        try:
            await bot.send_message(
                settings.telegram_channel_id,
                text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        except Exception as e:
            log.exception("send to channel failed: %s", e)

    summary = "üìä –°–≤–æ–¥–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n" + "\n".join(results_lines)
    await msg.answer(summary, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª—é–±–æ–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞–ø–¥–µ–π—Ç
@router.message()
async def any_message(msg: Message):
    log.info("‚öôÔ∏è  –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã: chat=%s text=%r", msg.chat.id, msg.text)

# ----------------- –ê–≤—Ç–æ—Ü–∏–∫–ª -----------------

async def periodic_task(settings, bot: Bot, storage: Storage, ex: ExchangeClient, llm: LLMAnalyzer):
    while True:
        try:
            # –ë–µ—Ä—ë–º –ø–∞—Ä—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –∏–∑ –ë–î, –∏–Ω–∞—á–µ –∏–∑ .env
            pairs = storage.get_global_symbols()
            symbols = pairs if pairs else (settings.symbols if settings.symbols else ["BTC/USDT"])

            for symbol in symbols:
                try:
                    log.info("Triple fetch %s %s ...", symbol, "/".join(settings.triple_timeframes))
                    snapshots = await _build_snapshots_triple(
                        ex, symbol, settings.triple_timeframes,
                        settings.ma_window, settings.macd_fast, settings.macd_slow, settings.macd_signal
                    )
                    if not snapshots:
                        log.warning("Not enough data for %s on one of tfs", symbol)
                        continue

                    analysis = await run_sync(
                        LLMAnalyzer.analyze_triple, llm,
                        symbol, snapshots, settings.literature_urls, settings.report_locale
                    )
                    buy = bool(analysis.get("buy_signal"))
                    conf = float(analysis.get("confidence", 0.0))
                    reason = str(analysis.get("reason", ""))

                    decision = "BUY" if buy else "NO_BUY"
                    storage.insert_signal(symbol, "1d", decision, conf, reason)

                    if buy:
                        if _within_cooldown(storage, symbol, "1d", settings.buy_cooldown_hours):
                            log.info("‚è∏ –ü—Ä–æ–ø—É—Å–∫–∞—é BUY –ø–æ %s ‚Äî cooldown %d —á. (–¥–Ω–µ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω)", symbol, settings.buy_cooldown_hours)
                            continue

                        text = (
                            f"üü¢ <b>–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∞ –≠–ª–¥–µ—Ä–∞)</b>\n"
                            f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: <code>{symbol}</code>\n"
                            f"TF: <code>{'/'.join(settings.triple_timeframes)}</code>\n"
                            f"–í—Ä–µ–º—è (UTC): <code>{ts_now_iso()}</code>\n"
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{conf:.2f}</b>\n"
                            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reason}"
                        )
                        if active:
                            await bot.send_message(
                                settings.telegram_channel_id,
                                text,
                                parse_mode=ParseMode.HTML,
                                disable_web_page_preview=True
                            )
                            log.info("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª: %s", settings.telegram_channel_id)
                        else:
                            log.info("‚è∏ –°–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ stop)")
                except Exception as e:
                    log.exception("Error on symbol %s: %s", symbol, e)
        except Exception as e:
            log.exception("Periodic loop error: %s", e)

        await asyncio.sleep(settings.schedule_seconds)

# ----------------- Bootstrap -----------------

def build_bot() -> tuple[Dispatcher, Bot, Storage, ExchangeClient, LLMAnalyzer]:
    settings = load_settings()
    bot = Bot(token=settings.telegram_token)
    dp = Dispatcher(lifespan=lifespan)
    dp.include_router(router)

    storage = Storage(state_dir=settings.state_dir)
    ex = ExchangeClient(settings.exchange_id)
    llm = LLMAnalyzer(settings.openai_api_key, settings.openai_model)
    return dp, bot, storage, ex, llm

async def main():
    dp, bot, storage, ex, llm = build_bot()
    settings = load_settings()
    task = asyncio.create_task(periodic_task(settings, bot, storage, ex, llm))
    try:
        await dp.start_polling(bot)
    finally:
        task.cancel()
        with contextlib.suppress(Exception):
            await task

if __name__ == "__main__":
    import contextlib
    asyncio.run(main())
